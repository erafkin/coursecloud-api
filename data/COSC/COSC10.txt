55% of grade is exams, rest is problem sets, short assignments, and drill attendance Although the tests were hard, I think thats how we learned the real life applications of what we learned in class. Definitely the most stressful part of the class. I enjoyed the problem sets a lot more. Exams were a bit too hard Exams were harder than expected. Exams were pretty tough, but generally curved out. Problem sets were time consuming but so rewarding to finish, and definitely reinforce the material. Fair Handwritten tests were difficult, but good test of knowledge/problem solving, sometimes leaning more heavily to the latter. I believe that the evaluations were all fair and that the workload was large but manageable. I think this course was a very fair course. Some of the projects and tests were difficult, but there was always adequate help and preparation aids. I thought it was effective I thought the tests were a little unfair, just because they werer on paper It was fair N/A Outside of class, we had around ten short assignments and six labs. For tests, we had two midterms and a final, all of which were very difficult. SAs and labs were pretty fair. Exams were too difficult Sometimes the problem sets may be a lot, but I think the course is really about creative problem solving, so it is ok Student evaluation seemed very appropriate. Tests were hard but fair I think.  Problem sets were very useful.  Programming drills were sort of hit and miss and probably helped specific students in very different ways. Tests were too too long. I’d prefer fewer harder questions. Not being able to get to problems was disappointing. The exams are really tough overall and just really a challenge even though I had done the problem sets and practice problems. There is a really high workload expected of students with the problem sets, and those take a long time to complete for sure (around 20-25 hours for each for me). Short assignments and drills all make sense The exams were too much work for the amount of time given. The labs were a very challenging but fair way of assessing understandings of key concepts. Personally, I felt that the exams as a supplement to the labs could have been a bit more of a straightforward test of mastery of the material, rather than complex, challenging questions that forced you to think on your feet. Since the labs already assessed creative thinking and very high level programming, I felt like the exams could have tested more straight-forward concepts. I often felt that I understood and had mastered all the concepts from class, yet still did not do exceptionally well on the exams because they would often introduce new concepts and expect you to think creatively on the spot. The method of evaluation is fair and well balanced. The course load is heavy but necessary. The methods have seemed fair The methods of evaluation chosen by the professor were fair. The non-examination assignments (problem sets, short assignments) played a large role in the course, and had a large weight in the grade. The workload was a lot, but manageable; the test were very difficult. There are 6 problem sets (programs), four or five short assignments and then three tests (two midterms and a final). If you start everything early you’ll be fine! They were too concentrated in big assignments. They were very effective. All lecture, which is likely the most effective way to teach the course. All lectures Class is very engaging, and the Professor was always ready to answer questions. Class was mostly lecture with a few interspersed interactive demonstrations and examples. Definitely a lot of lecture, but that is to be expected from a CS class. Fair I enjoyed the overall structure I like the mix of lectures and programming drills I think it was a good mixture. I think the class is well structured. It’s mainly lectures, but I feel like that’s the most effective teaching method for a large intro course. We have group programming drills outside of class which are also helpful. I think the lectures were the right length, but there were limited opportunities for discussion. I think students would benefit more from more discussion opportunities. (maybe during section meetings) It is mostly lecture, but the lectures are usually interesting. It was all lecture. Lecture is dominant and I think this makes sense. Lecture style was very good. Lots of time with examples of basic concepts, would be great if more time was spent connecting this to code implementation Mostly lectures with some questions asked, small group discussions outside of class N/A Pretty exclusively lecture, but easy to ask questions. The class was all lecture, but we had weekly programming drills. The class was mostly lecture, but the professor wanted the lecture to be driven by questions. This was appropriate given the size and scope of the course. The structure is great, especially the use of programming drill small groups where it\'s a lot easier to ask questions. The structure of the class was all lecture which was fine There is a lot of lecture and discussion, good structure There is only lecture really but CBK was good about letting us ask questions! There wasn\'t a lot of discussion, but that\'s due to the nature of the course. a lot of lecture good good mix it was as much lecture as was necessary. Going to continue as a CS Major, loved the class. I am going to take CS5 next term. I am still thinking of majoring in computer science. I developed my programming skills and got a prerequisite for my CS major! I enjoyed the course overall, but it definitely led me to question my decision to major in CS because of the difficulty of the exams. Though I felt I could sufficiently complete the labs and other programming assignments, I found that performing highly on the exams was almost impossible even if I had mastered the material, which was frustrating at times. However, the class certainly pushed and challenged me, which I appreciated. I learned a lot, but it really wore me down and affected my performance in other classes in a negative way because this one was so time consuming. I was planning on continuing in CS before this class, but I am now really questioning if I want to do that because of the time commitment of these classes. I currently still plan on it, but it was just by far the most draining class I\'ve taken at Dartmouth and was a lot of hard work. I really enjoyed the class and will continue in CS I think this course is very helpful in helping me understand more about programming and arose my interest in learning more. I\'m encouraged to take higher-level computer science courses. It challenged me a lot. It didn\'t turn me away from being a cs major. It encouraged me to continue with my CS minor. It had a very positive influence on me. It has encouraged me to continue CS. It has excited me about the field of computer science and influenced my thoughts towards a major. It has improved my understanding of computer science immensely It was definitely a positive experience, and it reinforced my interest in Computer Science. I’m not taking any more cs classes later but I wasn’t planning too. Made me want to be a major! One of best classes I\'ve taken Probably the best class I took this term Reinforced interest in comp sci The course taught me the importance of attending office hours and made me less afraid of asking questions during lectures. This course really reinvigorated my interest in computer science, specifically graphs and graph algorithms. This course was enjoyable and increased my interest in pursuing a CS major. Very engaging CS class, may continue in CS. definitely one of the most challenging but rewarding classes i\'ve taken forced me out of my comfort zone and was demanding gave me more confidence in the CS field! good base for future CS classes. Pierson is a great instructor. If you did AP CS in high school, the first 2 weeks of this class will be very boring. Otherwise, the class is interesting. If you have no Java experience, this class will be very difficult. Unless you are really committed to becoming a CS major, reconsider taking this course. Throughout the course, you learn multiple new data structures, machine learning techniques, and client-server communication. The workload is about 6-15 hours a week on a problem set. They get progressively harder and require the entire week. Both the midterms are reasonable, but a big time crunch. This class has so much material that you really need to want to study it for you to survive this class. I came into the class sort-of taking it for fun, but struggled a lot because it took forever to just study all of the material. It\'s so much, and it really takes a lot of willpower and motivation to get through it. That being said, I quite like Pierson as an instructor, and his lectures always made a lot of sense. He was always really clear, and he has a really untraditional background for a computer scientist having gone through the business side of things first. Good class. If you have a strong CS background (especially Java), e.g. a 5 on the AP, it will be easy. Otherwise, it can be a very hard class. Pierson expects you to either already know or teach yourself Java, and immediately gets into abstract concepts without teaching how to code at all. Still, he is a good teacher with a great website containing all the slides and notes and his teaching style is solid. Don\'t be afraid to ask questions in class. The problem sets can be harder than expected, depending on your programming skill coming in to the class. This was a challenging, but rewarding class. Most of the challenge comes not from the conceptual difficulty of the material (though that begins to change during the last third of the class) but from the sheer amount of material covered. With every new day, we were presented a completely new topic with little relation to the previous. That\'s just the nature of the class, and most of my peers felt that there was little to be done except study diligently. Regarding workload, I would spend 4-10 hours on each of the problem sets (this was fairly quick I think) but this was because I refused to go to office hours because I wanted to struggle with the content. The short assignments took 10-20 minutes on average, and I would study for around 5 hours for each exam. This is the experience I - somebody who: took CS 1 with Cormen and scored well (A), had a fairly solid background in math, and went out like 4 times this term- had, so factor that into your evaluation of this review. On the topic of experience, this class was an absolute blast. I really enjoyed the content (however difficult it may have been) and it significantly deepened my appreciation and understanding of computer science. I like Professor Pierson a lot, and his teaching style suits my own learning style (brief general overviews in class, where the majority of the learning comes from struggling with the content yourself in problem sets and in the process of studying for exams.) Some do not like Pierson as much (and there is legitimate reason to feel this way) and I remember one of my peers describing Pierson\'s lectures like McKinsey pitches - you leave his lectures feeling safe and secure in your understanding of the material even though you should not. All in all, I recommend this class to individuals interested in CS or simply looking for a challenge. Monotone lecturer but a good dude. The psets take a long time and the tests are pretty hard. If you make sure your psets and short assignment grades are near-100 and you get B\'s on your tests, you\'ll be in A territory. To avoid getting railed by midterm 1, know your Java (toString, inheritance, etc.) and think data structures in data structures (lists of lists, arrays of arrays, etc.) to map 2d situations. Midterm 2 required you to understand file reading/writing, runtime, and how to solve solutions using up to 4 data structures in a single method. Can\'t give much advice for the final -- ours was an online MC joke because our class got nuked with corona.  This was a challenging, but rewarding class. Most of the challenge comes not from the conceptual difficulty of the material (though that begins to change during the last third of the class) but from the sheer amount of material covered. With every new day, we were presented a completely new topic with little relation to the previous. That\'s just the nature of the class, and most of my peers felt that there was little to be done except study diligently. Regarding workload, I would spend 4-10 hours on each of the problem sets (this was fairly quick I think) but this was because I refused to go to office hours because I wanted to struggle with the content. The short assignments took 10-20 minutes on average, and I would study for around 5 hours for each exam. This is the experience I - somebody who: took CS 1 with Cormen and scored well (A), had a fairly solid background in math, and went out like 4 times this term- had, so factor that into your evaluation of this review. On the topic of experience, this class was an absolute blast. I really enjoyed the content (however difficult it may have been) and it significantly deepened my appreciation and understanding of computer science. I like Professor Pierson a lot, and his teaching style suits my own learning style (brief general overviews in class, where the majority of the learning comes from struggling with the content yourself in problem sets and in the process of studying for exams.) Some do not like Pierson as much (and there is legitimate reason to feel this way) and I remember one of my peers describing Pierson\'s lectures like McKinsey pitches - you leave his lectures feeling safe and secure in your understanding of the material even though you should not. All in all, I recommend this class to individuals interested in CS or simply looking for a challenge. It\'s really helpful if you already know some Java before starting this course. I relied heavily on my Java background from AP computer science in the class. The class moves really quickly, but it\'s manageable. Preview the material before class, review the slides after lecture, and make sure you understand the programming drill exercises and problem sets. The problem sets take so much time and are really difficult, so start them as soon as possible and stick to a good schedule. The problem sets are really frustrating and difficult, but they are also extremely rewarding at the end (when the code actually works). The TAs are helpful in general, but some didn\'t really know what was happening a lot of the time. Professor Pierson explains concepts well. However, the problem sets could have been explained a little bit more clearly. I took CS1 with Cormen — no programming experience beforehand — and found it very manageable and straightforward. CS10 was double the workload & difficulty. Mainly because Pierson doesn\'t spoonfeed you nearly as much as Cormen does; whereas Cormen\'s instructions on both labs & exams were basically pseudocode, there is a lot more room for interpretation, and variability in solutions & their efficiencies, on Pierson\'s materials. Get used to thinking of data structures within data structures within data structures. Also, do whatever you need to do to keep up with the fast pace of this course (preview, review, ask questions, etc.). Make use of TA office hours, but maximize your time by going to the ones with the more experienced TAs. You\'ll figure out who they are soon enough. This course sucks so much and made me cry. I don\'t know who had enough hours in their weeks to be able to succeed in this class but it certainly wasn\'t me. I don\'t think I was ever able to turn in a lab fully completed because they were so needlessly obscure and difficult. There was way, way too much material packed into 10 weeks and the exams were harder than anything we\'d seen in class or on homework. I enjoyed coding before this class but no more- it\'s clear that the CS department at this school doesn\'t have room for me, or for any student that enjoys free time/mental stability. An excellent class! If you come in knowing Java, you are at an advantage for the first 2 weeks and the first midterm, but after that it doesn\'t really matter. Professor Pierson\'s lectures can get dry because he reads directly off his slides but the problem sets are very interesting. This class is quite time consuming but extremely manageable and exam questions are fair as well. There are a ton of TA office hours for help and if you stay on top of everything, this should be a very manageable class. Pierson is a great prof and really nice and approachable too. He\'s a really interesting guy to talk to if you get a meal with him. The class is hard like most CS classes so you gotta put in the work. 6 practice sets, 9 really easy short assignments, weekly drill section, 2 midterms which are kind of hard especially the second one (study your runtimes), and the final isn\'t too bad. You learn a lot of data structures and other important stuff like graph traversal. Definitely work with a partner on practice sets as this will save a lot of stress. It is definitely helpful knowing some java going in too. CS10 is a significant step up from CS1, but definitely doable if you can put in a significant amount of time to work on the psets. I can\'t speak for those who have CS experience before coming to Dart, but after taking CS1 with Vasanta, I found the problem sets in CS10 to be 4x harder rather than the 1.5x or 2x harder I was expecting. Pierson is a very kind person and a good professor, but his lectures are a little sleep-inducing as others have said. I wasn\'t getting great this term, but I sometimes found it hard to stay awake during class (which I can\'t say about any other class I have taken in 2 years at Dartmouth). Exams aren\'t the worst, but you practically have to be able to write code as quickly as you write in English to finish them completely on time. All this being said, the class is certainly doable if you get decent sleep, try to understand Pierson during lecture, and invest a good number of hours into problem sets. I would highly, HIGHLY, recommended using an NRO on this class no matter how smart you think you are, especially for CS majors since it is the last prereq for the major and major classes after prereqs are out-of-bounds for NRO. Getting a solid grade is far from impossible, but having the comfort of the NRO safety net is a huge help when struggling on problem sets or rushing through the exams. Very hard class. Unless you are willing to put in hours upon hours to complete a pset and then study for several more hours on top of that for exams, you are going to hate this class. Having taken CS1 with Vasantha and enjoying it a lot, I thought this would be an enjoyable next step, but it completely turned me off from CS. You have to really love computer science to enjoy this class. This class went insanely fast. Pierson goes through roughly 120 slides per class. It was hard to absorb all the information being thrown at you. I recommend sitting on the sides with your laptop in class and following along on your computer to the slides. Sometimes he goes really slow on the concepts to make sure you understand it, but then he\'ll speed through the actual code parts. The labs were hard. It took a lot of hours at office hours with TAs for me to figure out the labs. Try to do labs with partners. That definitely helps. Do the practice problems before the exams, but don\'t fret if you can\'t figure them out. His exams were usually much easier than the practice problems he gave us. His final really helped boost my grade. If all else fails, remember you can NRO this class. Professor Pierson is one of most interesting professors I\'ve had during my time at Dartmouth. Some people complain about the pace of the course and conflate its difficulty with Pierson\'s teaching skill, which is a flawed assumption as best. Be ready to put in work, work with a partner who works just as hard as you (which is hopefully very hard), and you\'ll do fine. Slack off, expect the lectures to leave you completely understanding the material, and you won\'t succeed. CS is not about listening, it\'s about doing. If you can\'t figure out the concepts on your own, then maybe CS as a course of study isn\'t for you. Professor Pierson is one of most interesting professors I\'ve had during my time at Dartmouth. Some people complain about the pace of the course and conflate its difficulty with Pierson\'s teaching skill, which is a flawed assumption as best. Be ready to put in work, work with a partner who works just as hard as you (which is hopefully very hard), and you\'ll do fine. Slack off, expect the lectures to leave you completely understanding the material, and you won\'t succeed. CS is not about listening, it\'s about doing. If you can\'t figure out the concepts on your own, then maybe CS as a course of study isn\'t for you. Tons of work and overall hard class but still pretty manageable. I actually think the class is easier for you if you took AP CSA than if you took COSC 1 before this class (judging from other people\'s reactions to the class), because you won\'t have to struggle with syntax and you\'ll be familiar with java and it\'ll make sense to you. Still not super bad if you did take COSC 1 before though, I would think. It\'s definitely not a layup but I think people exaggerate about how hard it is. I would say, to do well just go to class (never skip, you\'ll miss so much content), try to understand (like to actually think about it and have it make sense to you, or if not, ask for help in understanding either from the prof or the usually super helpful TAs) and you\'ll be okay. The midterms are hard and super stressful and everyone gets a pretty bad grade on them but your grade will probably go up a lot with the curve. You really just get the back the grade for the effort that you put into the class, imo. But I\'m super glad I took this class, was super interesting and overall super fun. The material of the class is really interesting. However, Pierson is a terrible professor, who has completely plagiarized the class from the last prof. As such, all the last profs\' mistakes in assignments are still present. I love this material but almost every assignment is riddled with unclear directions, and english so bad someone from north korea could have written it. TAs are helpful. The class would be infinitely easier if it was written by someone with a coherent understanding of the english language. Also, to do well in this class, familiarize yourself with java beforehand. ESPECIALLY java swing and awt. You won\'t need to write a lot of gui code / swing code, but I think that understanding these libraries will help you grasp assignments much faster and make your life much easier. CS10 is a huge step up from CS1. I had a relatively easy time in cs1, did well on the exams, and I thought cs10 couldn\'t be that much more difficult. I was mistaken. If you have time before the course, I would definitely recommend starting to learn Java syntax. It\'s very different from Python and the first few labs took me an unnecessarily long time just because I was so familiar with the syntax. Beyond that, the first and final exams are really difficult. Even though we were allowed to work with partners for the labs, you should do labs yourself to be better prepared for the exams. I think this class will tell you how well-equipped you are in continuing in CS, and if you struggle a decent bit, then I would recommend changing your major. If you can take this class with Professor Jayanti, do it. He is an absolute joy. He makes lectures engaging and easy to follow. He gives good assignments and provides plenty of help. The exams are not easy, but they are fair - they cover questions similar to the ones covered in class or assignments. Course: *** Please read! *** Professor: This is pretty long, but please read because I think the information I\'m giving is really helpful, and I wish I knew this stuff before I went into the class. The professor is not that great with words. You have to sort of already know the answer beforehand in order to understand what the professor is getting at. Fortunately, though, you can go to office hours/ help hours/ T.A. hours to get extra help if you are unable to follow the lecture. Having the professor teach me individually during office hours was very helpful. During his lecture, I would not understand a concept, and he would just keep going, and since the material is cumulative, I was basically screwed. He just goes too fast during the lecture for me to follow, and he\'s just not great at explaining the logic of the algorithms or the purpose of each of the data structures. I think it\'s because he just assumes we know certain things already. That\'s why I would highly recommend going to his office hours to have him clarify some of the steps he sometimes skims over or just assumes we know. He is very friendly during office hours, and you don\'t have to worry about being bothersome to him because he is genuinely happy to help you. I\'m a pretty shy person, so at first I was really uneasy about going to him for help. However, by the end of the term, I was just so desperate that I had to, and I\'m really glad I did because otherwise, I\'m sure I would\'ve died on the final. If I could change one thing, it would be to go to office hours more often and not have been so reserved until it was almost too late. I had taken c.s. in high school and gotten a 5 on the AP CS A, so I sort of felt invincible going into the class and was like,  I dont\' need no help,  but I was absolutely wrong. Getting help early, for the tests and for the labs, is super important. Sorry I made this so long. Good luck! Workload: Sorry this is so long, but please read because I think the information I give is important. The course is fast-paced and time-consuming, which means you should probably not take too many other work-intensive courses alongside this course. Be very wary of your time management. I was overconfident and took some really hard courses alongside this course, and I deeply regret it. Please stay on top of your homework and labs. I feel like everyone, including me, thought they could just be CLUTCHBEAST and do the labs on the second to last day or last day, but DON\'T do that. Also, I always study like... one or two days before test because I am the procrastinating kind, but DON\'T do that either. It is easy to fall dangerously behind very fast, because concepts are cumulative (to some extent), and it takes time to think things over and finally understand the logic of it. When I eat or walk around campus to go somewhere, I am usually thinking about the comp sci material we just learned because, for me at least, the material isn\'t something you can just get immediately. It takes time to figure out the logic before it finally clicks. Most people reading this are probably going to be like,  No I\'m so smart. I can do anything. This reviewer is probably just some noob who isn\'t made for the c.s. major and should probably go do the Econ major,  but I promise you I am legit (not to be arrogant). I scored really well on the final and did really well on the problem sets, and I still thought the course was super hard and that staying on top of the homework and material is super important. Just don\'t leave things to the last minute! Good luck! Course: Fast-paced and really interesting. The concepts you learn in class and the problem sets make you think. Professor: Very enthusiastic, eager to answer questions, and explained concepts clearly. Workload: Lots of work. Weekly problem sets and short assignments (which aren\'t that short sometimes). It\'s necessary to really get prepared for other CS courses at Dartmouth, though, so its nothing to complain about. There are a lot of help hours for assignments. If you\'re reading this, you\'ve most likely taken CS 5 and are considering the next step. If that\'s the case, CS 8 won\'t surprise you- it\'s very similar in structure to CS 5. Lectures that are pretty dry (code examples don\'t work well in a lecture format) but the labs are fun and interesting- the Kevin Bacon game for databases, for example, and Tetris for graphics. Haskell is very different from Java. It\'s going to feel very weird for a while, but you get used to it, so don\'t worry if it\'s uncomfortable for several weeks. It was interesting to see how different programming languages can be, how their strengths and weaknesses are different. The course feels very standard. I\'m not sure what it is, but there\'s something exciting about CS 5 that isn\'t there in CS 8. I\'ve spoken to other students who feel the same way. The labs are definitely fun, though. By the way, beware the Stock Data clustering lab- it fell at the same time as the midterm, and was the most difficult lab of the course in my opinion (since you have two weeks for Tetris.) Also, with grading, you get practically all of the points on the programming assignments (if you finish them and they work), but the tests tend to be difficult, so it isn\'t necessarily a guaranteed A. This class was a functional programming class. While the labs were (for the most part) really cool (Tetris, Kevin Bacon Game, etc), the actual lectures were invariably boring. you DO need to go to class: he covers tons of stuff in lecture that isn\'t in the book, but it\'s not a class i really looked forward going to. If you\'ve got solid programming skills, i\'d recommend the class, but if you\'re not a major/minor, i wouldn\'t take it for an  easy third . I spent many late hours in sudikoff, and so did many of my classmates. In the end, i\'ve got a love-hate relationship with the class. even though i did learn a LOT, it was tough and time-consuming. The lectures during class were - at best - mediocre. Although taught with the best intentions, and by a good prof, the concepts were very difficult to explain through a lecture and the lectures were close to useless. Tangents and explanations of  bad  methods of doing things led to confusion. Luckily, the Professor posted typed lecture notes (although not formatted), online - which were helpful to use to study for exams. See the lab section below for information on that... Unfortunately, the heavy weighting of the tests counteract all the work you put into PSs - and the tests are not only very difficult, but also seem to have many trick questions. This course will make you reconsider many times if you really want to be a CS major. Take it only if you need it to become a major - and are sure you want to. The hardest part about this course is the lab-- the problem sets and short assignment do help you to understand the material but if you are not a natural programmer expect to spend a HUGE amount of time in the labs. The TAs are not always available and many times there were many more students who needed help than there were available TAs. Expect a big time commitment The professor knows the material and the TA\'s are good. But the course hasn\'t been taught very many times, and things are still getting ironed out. The course is really great and interesting. Functional programming is a whole new world (different from OOP stuff like Java). The syntax of the language used in the course (Haskell) is a little frustrating at first, but you come to appreciate it as time goes on. The material is really interesting, but the lectures can be a little dry sometimes. It varies day-to-day. Some are good. Some you\'d rather sleep through. The problem sets, though, are a lot of fun. Among other things, you create programs to play Tetris, parse HTML, and play the six degrees of Kevin Bacon game. Functional Programming is quite exciting compared to the tedious Java of CS5. The lectures for the course weren\'t that great. Drysdale knows a lot but he does not communicate it very effectively. However, he puts up his lecture notes on the web, so you can easily teach yourself what you missed after class. The assignments on the other hand are a lot of fun and the way to really learn what was taught in class... The material was definitely interesting and professor Drysdale is a very nice person. However, in the later parts of the course, I found myself dozing off in lecture because professor Drysdale often went over pieces of code in class, which was rather ineffective for me. However, I am really glad to learn about functional languages and I got to enjoy Haskell a great deal. The assignments/exams were definitely fair. The classes and topic were decent, but some of the lab assignments were ridiculously hard. They were all doable, but would take 6 or 7 hours per night. However, the prof and the TAs were helpful. Also, you really don\'t need to buy the book. You can find everything online. This class isn\'t too bad. I slacked off a bit during the term so I didn\'t do as well as I\'d liked, but all the work was pretty manageable. Haskell is a bit weird to get used to but I liked it once I understood it better. I hate exams in this type of class, but they\'re pretty much like the ones in CS5 (except there\'s only one midterm). The major problem I had with this class is just that Drysdale is reeeeally boring, so I almost always fell asleep in class. He posts his lecture notes online though, so teaching yourself the material really isn\'t that bad. I enjoyed this course a lot. Admittedly, I am something of a CS geek. The programming language this class is taught in is very helpful, I\'ve found, and my experience coding in it has made my code overall much better. Coming from a language like Java or C, Haskell seems initially very odd, but it is incredibly powerful, as we came to realize in the course of this course. Professor Drysdale was very accessible, and while I never took advantage of his office hours, he was very good about responding to questions emailed to him, I found. This is the first term this particular class has been taught, so it was perhaps a little rough around the edges. The old CS-18, before my time, was taught by the now-departed Fromberger and used Scheme. This class is (at least this term) taught by Drysdale and uses Haskell. Professor Drysdale is perfectly competent and knows (and explains) the concepts of functional programming, but it\'s obvious he hasn\'t been working in Haskell for years. The problem sets were overall very reasonable, but the third one was considerably more time consuming than the others, and came as something of a shock (it was not intended to be any more difficult). Little rough edges such as these should be ironed out as the course is taught more. I personally found Drysdale\'s lecture style to be a bit boring, and he would sometimes go through some examples and expansions that seemed unnecessary to me. Nonetheless, the lectures were informative, and I would highly recommend attending them. Skim the textbook to pick up a few minor points and concepts that the lectures don\'t cover or if you\'re having difficulty understanding the lecture. In general I didn\'t consider the text to be phenomenal or essential for most of the course. The problem sets are for the most part very interesting applications (parsing, solving problems such as n-queens). There is a little too much emphasis on graphics for my taste, and the final project involved writing Tetris. The application of functional programming abstractions to these areas is interesting, but I think slightly impractical. Game/graphics development is one area where C/C++ still reigns supreme due to the speed concerns and purely functional languages such as Haskell become a tad ugly when doing I/O. One place where this class really shines is in availability of the professor and TAs. There were three TAs in addition to the professor for a class of about 30, and all were very helpful. Professor Drysdale is very pleasant and always available.