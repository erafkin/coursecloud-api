12 short assignments, 4 longer Homework assignments and a culminating Project at the end of the term. 12 short assignments, 4 longer homeworks, then one big project. Good mix... appreciate that there was a final proj rather than an exam I loved not having exams I really like that the course was entirely assignment/ project based. I think it allowed students who are slower workers and who struggle more with coding to really manage their work and time in an effective way and to have a chance at doing well on the projects and in the course, even if it meant putting in more work and attending office hours frequently. Short assignments normally once a week or so and then 4 big homework assignmnets Short assignments, Homework assignments, then final project. All reasonable and the professor gave a lot of assistance and was supportive throughout. The short assignments mixed with homework were a good combination. Various methods of evaluation--all fair. Although we had an assignment due each week which took up a great deal of time, they were all based on the lectures from that week, so it held us accountable and forced us to actually learn and know the material. I wouldn\'t change anything. Very fair and reflective of the material we were learning (12 short assignments, 4 projects, 1 final project - all coding and producing a sketch outcome in Processing). Very good. Homeworks were heavy in the beginning which helped with mastery of the material methods of evaluation were great, weekly short assignments made sure no one fell behind short assignments homeworks and final project Although we didn\'t have any formal exams in our class, the comments left on our assignments and projects were extremely helpful. Plus, if we were still confused by anything we could just go to office hours. Grades are split among smaller assignments and large projects, with a final project at the end. Workload depends on your creativity and coding experience, with some of the shorter assignments taking minutes and the projects taking days. I liked the short assignments and homeworks. They were well timed out and explained with visuals and descriptions I thought the open-ended homework assignments were fun. I liked working on them even when I knew I had already met the assignment expectations. I just thought they were really fun! I could have used a little bit more time for Homework 1, since I wasn\'t as confident in my skills at that point. Mostly take-home assignments and a final project. Reasonable and steady workload. No exams or papers. Only homework and projects. One project and 12 short assignments and 4 homeworks Reasonable methods of evaluation and workload expected. Short assignments, homework, and final project that take time but are somewhat enjoyable. It\'s like creating something Thank you again for giving projects as opposed to tests. The information is learned much better that way because there is so much less stress, I think. The SA were a great way to practice the material learned in class on a manageable scale and the four homeworkâ€™s were a good opportunity to create something you could get invested in. Very, very effective and fair methods of evaluation - mix of longer homeworks and short assignments. All lecture, but was effective & not sure how you would incorporate discussion Could maybe do more interactive lectures Great way of incorporating concepts into multiple different ideas. Lecture Lecture based but expected Lots of lecture-based learning, but I cannot imagine this course to be discussion-based. Professor Casey was open to every question and was committed to answering all of our questions by providing clear and compelling lectures. The office hours were also a great way to discuss the material with peers and with Professor Casey. Mostly all lecture with time for questions throughout the class. Mostly lecture but always makes room for questions and it was interactive. The structure of the class was all lecture, which is necessary for a CS class - especially one in which students have no prior experience. The structure of the course was pretty much al lecture, and I think for this type of class that worked out well. However, Professor Casey always encouraged us to ask questions and tried to engage students as much as possible. all lecture mostly lecture but with questions to engage students question time was allotted but I dont think discussion time is needed for this class 70% lecture. 30% discussion and waiting for the professor to get his materials together and find the documents he is looking for. All lecture Classes are all lecture but Casey leaves plenty of opportunities to ask questions. Exclusively lecture. Casey lets you ask questions in class though. Good mix - could speak up in class because it was a reasonable size, and also could get through a lecture It was a lecture-based class, but that was appropriate. It was lecture heavy, but considering that this is a computer science class that\'s not a bad thing. It was only lecture based and easy to follow. Mostly lecture with constant opportunity and encouragement for students to engage/ask specific questions. N/a mostly lecture Professor actively engaged students in discussion during lecture. i would have liked to have a better outline of class because some classes would be more discussion and theory based but I was waiting for the part where we went over code which made me less invested in the discussuon. Different from what I am used to but very applicable to the future I am genuinely really excited about coding and wish that I could take another course like CS 2 - it was the perfect pace and content for me. I learned a new style of thinking language and furthered my studies in arts and design I really became interested in computer science and proud that I managed to do it I really enjoyed this class because it challenged me to think in a very different way than I ever have before. Regardless of whether I use coding in the future I think being able to understand the basics and think in this way is very beneficial. It was a challenging but fun course for me. It helped me hit my TAS requirement. I\'m really glad I chose CS 2 over other classes that could have hit the same distributive requirement. It was definitely a bit out of my comfort zone but I\'m still so glad I took it and challenged myself. It was a wonderful introduction to computer science and one of my favorite classes at Dartmouth. Learned material that I never really though about beforehand. Loved this course and would recommend to anyone at Dartmouth... digital arts minor or not N/A Piqued interest in programming This course changed me. It changed the way I think about Computer Science throughout my academic career and throughout my professional one. I am highly considering modifying my major to include Computer Science as the secondary part after taking this course. Much of that has to do with Professor Casey\'s excellent teaching, and the other part due to the fascinating topics covered in this course. My final project was honestly fun a fun experience for my partner and I, and I will not lie about the fact that I have been using and trying out new things on Processing (the programming language we used in this course) for enjoyment over the break. n/a Amazing Completely motivated me to take more CS classes (maybe even minor!) when previously I had been daunted by the subject entirely. Exposed me to a basic understanding of coding language, and allowed me to express myself creatively through an outlet I otherwise would not have been able to use. Finally helped me get my TAS! Honestly I took this class because I thought it would be a decent way to fill my TLA. I was blown away by the quality of the course and how much I enjoyed it. I am seriously considering pursuing a digital arts minor after taking this class. I am new so I haven\'t had much of an academic experience I really loved this because I did not like CS1 but this was more art based and I liked it. It could be difficult at times, but I realized that I could depend on my instructors if I were stuck on anything, and they didn\'t make me feel bad for asking for help. It makes me want to continue along the CS course. It taught me some coding skills and made me interested in the digital arts minor It was a class unlike anything else I\'ve taken and was very useful It was my first coding course and I loved it, a great introduction to computer science for the less STEM inclined. I would definitely recommend taking this course if you need a TLA. I took it because a friend of mine highly recommended the course and I do not regret it. You learn a lot about Processing in a short period of time and although you will probably never use it again, it is an interesting and creative way to think. Professor Casey is great and provides a website with all the class notes (here https://cs.dartmouth.edu/~mcasey/cs2/index.php). A lot of people see this and do not show up to class as attendance isn\'t mandatory, but it is definitely better to show up as Casey notices and definitely helps the people who show up during office hours more. So show up and go to office hours and it is pretty easy to get an A. You should start the assignments earlier than you think and the course is the kind of layup that you have to work for (you can get an A but you have to actually put time into the class if you haven\'t coded before). Grades are based on 12 short assignments, 4 homeworks, and a final project. A word of advice: do not do a pong project for any of the four creative homework or the final project, Casey hates them and will publicly roast you if you propose it. This is one of the best classes I have ever had the pleasure of taking at Dartmouth. I took it because I needed a TLA, now I\'m considering finishing a digital arts minor. Casey is brilliant. He has expertise in both music and technology and the intersection between the two in ways that blew my mind. I thought he was a random guy from the music department teaching a CS class; turns out he\'s been writing code since 1984, went to MIT, and holds something like six patents. I heard a rumor that he was somehow involved in Spotify\'s music-recommending algorithm, which I can\'t confirm but honestly wouldn\'t be at all surprised if it were true. Anyway, the course itself was really fun. I had some programming experience before but still felt challenged enough to feel engaged in the course. You get as much out of the class as you put in, and if you meet all of the outlined expectations for each assignment you\'ll get an A. If you half-ass your work, you won\'t get an A. There are definitely some legitimately tricky classes despite what the A median might have you believe, but it\'s manageable. Creativity is rewarded. The class uses x-hour, but you get lab credit without technically having a lab. Casey and his TA were always available for office hours, which were super helpful. You learn to code in processing, which is essentially a watered-down version of Java. You probably won\'t be a proficient coder by the end of the course, but it will give you a solid enough foundation that you could definitely continue to build on if you wanted to. I\'d take this class a second time if I could. Best way I could\'ve gotten my lab distrib, that\'s for sure. This course moved really quickly. About half the class was stellar and probably will write raving reviews about the professor, and the other half had no idea what the hell was going on. The professor focuses heavily on examples without really spending a lot of time going over core concepts. There is a lot of math-related thinking involved. Class is graded on two projects (that are very broadly defined, making it hard to determine what\'s worth an A), a bunch of homework assignments that use a straight-forward rubric, and two quizzes that are fair but challenging. Check out http://cs.dartmouth.edu/~cbk/2 for the entire course breakdown, including the syllabus and lecture notes. I don\'t think this class deserves the description CS for non-majors. Anyone who was good at this probably would have succeeded in CS 5. DO NOT TAKE THIS CLASS. There are much easier ways to get the TLA. The first week of class Professor Bailey-Kellogg makes the class seem like it will be easy and fun. IT IS NOT. Do not be fooled- it gets insanely hard and he cannot lecture to save his life. He first introduces examples, and then goes through each one offering an explanation. Result? No one understands concepts- merely these few isolated examples. When it comes time to complete the homeworks and projects more time is spent copying his work or begging the TAs for answers. He seems nice in class and over blitz, but in person he is awkward, unhelpful, and downright uncaring. I wasted an entire course and did not even learn anything. And the quizzes will destroy you. (Unless you are one of the lucky few awkward front-row kids who do nothing but study for this class.) The projects were bad enough to complete, but the quizzes are what end up slaughtering your grade. If you are into computer science and spending long nights withering away in the CS lab- take this class. If you are a normal person who values sanity and happiness, turn back now!!!!! I took this class having never taken computer science before, and it ended up being a really enjoyable way of getting a TLA requirement (the \'labs\' are just assignments that you can do on your own laptop). The class moves really fast, and most of the learning for the course can be done by just fooling around with the programs rather than actually paying attention in class. The weekly homework assignments are helpful, but the projects were so open-ended that it was hard to know what was actually expected. The quizzes are fair, but they require a lot more knowledge of programming than the assignments, which can be mostly cut-and-paste, trial-and-error jobs. Honestly though, they were fairly basic and not as big of a deal as a lot of people in the class made them seem. I absolutely recommend this class for the distrib requirement, mostly what you do is fool around with a computer program and make things that look cool.  took this course thinking that it would be a fun beginner\'s course to help ease non-majors into programming. Boy, was I wrong. This is an incredibly fast-paced course that was very difficult to follow. The root of the problem, I feel, is that Prof. Bailey-Kellogg, while a very nice man, cannot lecture to beginners for the life of him. He would sort of explain the general idea, then show us example after example after example without ever really explaining how the code worked. If you could follow that jump and deduce how to use the code properly, great for you; if you couldn\'t (as the majority of the class couldn\'t) then you just had no clue what was going on. The entire course continued this way, and I think that the majority of us had absolutely no idea what was going on by the end of the class. His notes were a bit more helpful, but they didn\'t really explain how the coding worked, either. All in all, we were left to our own devices there. The tests were absolutely awful. The homework assignments were fairly open-ended, the projects extremely so (Do something cool. Go.), but the tests asked for incredibly specific programming (write a code that would result in this, with these ten specific details). As a result, if you weren\'t one of the few people who actually understood what was going on, the tests were pretty much impossible. (And he calls them \'quizzes,\' but they\'re a mid-term and a final. Really.) The first test was bearable, but the second went so badly for the entire class that Prof. B-K scaled it 18 points. I think my biggest problem with this course was that there was absolutely no correlation between comprehension and the grades we got. I say this having gotten an A and not understanding anything after the first week of class. I heard more than one person say they got 60% on one assignment and 100% on the next with the same level of comprehension. The general consensus was that CS5 would have been easier. This course was pretty miserable at points. If you don\'t understand CS, then don\'t take this course - it\'s not worth it. class while excellent for fulfilling a TLA distrib, is a bit of a gamble. I ended up doing okay in the class but had several sleepless nights in the lab and still did not get the grade I wanted. There will be CS majors in the class and other people for whom this is much easier and takes less time, so even though the class says no CS experience required you are at a disadvantage without it. Also, since the language/program is obscure you can\'t really transfer the knowledge if you want to continue in CS. So, it could be worth it for the distrib (there really were no labs, just TA help time) but be prepared to spend more time than you think and get a bad grade.